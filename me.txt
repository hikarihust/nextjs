                                        Giới thiệu NextJs
            
Tìm hiểu cấu trúc ứng dụng NextJs đầu tiên
    Lệnh tạo project: 
        npx create-next-app first-project-nextjs 
    Cài đặt yarn: 
        npm install -g yarn
    Một số lệnh
        npm run dev
            Starts the development server.
        npm run build
            Builds the app for production.
        npm start
            Runs the built app in production mode.
    npm run dev
    Cấu trúc thư mục 
    Mặc định trang chủ là:  pages/index.js 
    pages/api/ Là nơi có thể code backend(nodejs)
        http://localhost:3000/api/hello
        http://localhost:3000/user

Deploy ứng dụng NextJs đầu tiên
    Create new app: first-nextjs
    Tab Deploy:
        GitHub
        Connect to GitHub
    Connect to GitHub
        repo-name: first-nextjs
    Choose a branch to deploy:
        master 
        -> Deploy branch
    View 
    Application error
        Edit package.json: "start": "next start -p $PORT"
    https://first-nextjs.herokuapp.com/

=============================================================================================
                            Tìm hiểu NextJs cơ bản

Cài đặt và tích hợp Typescript với NextJs và React 
    npm install --save-dev typescript @types/react @types/node
    yarn dev
    Khi sử dụng typescript thì các file liên quan(index.js...) thì đều có thể sử dụng song song 
        cả javascript và typescript tuy nhiên khi làm dự án thực tế thì thường đổi lại đuôi của các 
        file đó:
        Dùng typescript: js -> ts
        File nào dùng cú pháp của jsx(các file liên quan đến Component): js -> tsx
            index.tsx
            user.tsx
        pages/api/hello.ts 
Tìm hiểu về khái niệm Pages trong NextJs
Tìm hiểu Dynamic Route
    admin/user/[id]
Tìm hiểu Routing Basic
    Lấy được tham số ở trên đường dẫn 
Tìm hiểu Static File Serving và cách cài đặt
Custom lại Webpack và cách dùng File loader 
    Custom Webpack Config
    https://webpack.js.org/concepts/#loaders
    npm install url-loader --save-dev
    zeit config plugins
        https://github.com/vercel/next-plugins
        next-images
        npm install --save next-images
    npm remove url-loader
Custom App Component và CSS Module Support
    pageProps = {
       users: [],
       posts: [],
       isLogin: true 
    }
    {...pageProps}
        users = pageProps.users
        posts = pageProps.posts
        isLogin = pageProps.isLogin
    Sass Support
        npm install --save @zeit/next-sass node-sass
        https://github.com/vercel/next-plugins
    module.exports = withImages(
        withSass()
    )
Custom App Component và Typescript
    Khai báo Custom App theo kiểu Typescript -> Khai báo thêm kiểu cho App 
    App: Có thể khai báo theo kiểu Class và function Component

=============================================================================================
                            Life Cycle, React Hooks và ứng dụng
            
Ôn tập Life Cycle cơ bản trong Class Component
    state: Là data của Component, do chính nó quản lý
    props: Là data của 2 nơi khác truyền vào cho nó, nó chỉ nhận thôi, không thể thay đổi
Cách sử dụng State Hooks và so sánh
Tìm hiểu về useEffect trong Hooks
    Use Effect
        Trong LifeCycle thường là nơi gọi ra các service ở bên ngoài như là call API hay là dùng các 
        dịch vụ bên ngoài của webservice của google, facebook...
        useEffect Similar to componentDidMount and componentDidUpdate
        Một useEffect có return về 1 function, thì function này giống như componentWillUnmount()
            -> Component sẽ bị remove khỏi cấu trúc DOM 
    Use Effect deps: Có thể chỉ định lắng nghe sự thay đổi của state nào
        useEffect(() => {
            console.log("Lang nghe su thay doi cua counter");
        }, [counter]);
        Lắng nghe counter thay đổi 
Tìm hiểu về useMemo
    Returns a memoized value.
    Là 1 kỹ thuật dùng để cached dữ liệu lại 
    Dùng để chuyển đổi dữ liệu
    Không được lạm dụng, chỉ dùng khi biểu thức tính toán phức tạp 
    Cách dùng khác là dùng để tạo contructor bằng cách truyền empty deps và ko return về gì cả -> chỉ chạy 1 
        lần trước khi render
        useMemo(() => {
            console.log("constructor");
        }, []);
Tìm hiểu về useCallback
    Returns a memoized callback.
    Không được lạm dụng, chỉ dùng khi biểu thức tính toán phức tạp
Tìm hiểu về useRef
    Thường dùng khi tham chiếu đến 1 DOM nào đó 
Tìm hiểu Custom Hooks và useConstructor
    Các cách để tạo ra 1 constructor:
        Tạo 1 biến toàn cục
        useRef
        useMemo
        Sử dụng 1 Hooks do mình tự tạo ra để kế thừa 1 đoạn logic nào đó sử dụng đi sử dụng lại trong nhiều Component khác nhau
Ứng dụng Hooks trong tình huống thực tế - Demo
Solution 01
    Lỗi document is not define
    Khi tương tác đến server side render, phía server chạy trong môi trường nodeJs nên nó ko có trình duyệt -> không có document hay window 
    -> Sử dụng react Hooks
Solution 02
    useRef chỉ lắng nghe phần tử thay đổi 
    Chỉ chạy sau khi render -> chỉ chạy ở phía trình duyệt, ko chạy phía server 
    useMemo: Vừa chạy phía server và vừa chạy phía client 
    useRef: Có thể dùng đối với biến toàn cục không thay đổi
    useState: Có thể dùng đối với biến toàn cục có sự thay đổi
Solution 03
    <></> Bao ngoài của return của 1 Component để tránh sinh ra tag không cần thiết 
    renderFooter?: () => JSX.Element Trả về 1 cấu trúc html 
Solution 04
    useEffect: Chỉ chạy phía trình duyệt, ko chạy phía server
    keycode javascript: https://keycode.info/
    Clean up Using Hooks If your effect returns a function, React will run it when it is time to clean up
        removeEventListener() remove đi EventListener đã đăng ký 
Solution 05
    defaultProps: defaultProps is defined as a property on the component
Solution 06

=============================================================================================
                            Data Fetching và Server API

Postman Collection
    Cách Import 1 Postman Collection(Một tập hợp các API, các HttpResquest mà backend cung cấp)
        Collections -> Import 
    Tạo biến môi trường: base_url
        Manage Environments
        Add: Môi trường là Nextjs
        base_url: http://api-meme-zendvn-01.herokuapp.com/api
        Api: {{base_url}}/post/getListPagination.php?pagesize=3&currPage=1
Fetch Data trong NextJs
    Gọi API bằng code javascript
    javascript using fetch api
    Đối với ReactJs thì gọi API thường đặt trong các LifeCycle
    -> Đây là cách làm của React thông thường chỉ có Client Side Render 
getIntialProps trong NextJs Hàm hỗ trợ sãn của NextJs giúp mình có thể gọi API ở phía server
    Chỉ có thể viết được trong page mà không thể viết được trong Component
    Là 1 Static method
    GetIntialProps 01
GetIntialProps 02
    Các cách mà người dùng truy cập vào trang web
        1. F5: Request lai len phia server -> Nhan lai HTML hoan toan moi

        2. Di chuyen qua lai giua cac trang trong App (Thong qua Router Link cua NextJs)
            - Vua la Server side render
            - Vua la Client side render

            - Trong lan load trang dau tien
                -> User nhan duoc HTML hoan chinh khi request len Server
                -> Trong ma nguon HTML chua nhung file javascript lien quan toi React
                -> Sau do App se tro thanh Client Side Render
    GetIntialProps chỉ gọi phía server 1 lần duy nhất khi người dùng reload lại trang, sau đó nếu di 
        chuyển bằng thẻ link thì nó sẽ trở thành client side(gọi ở phía client)
getServerSideProps
    GetServerSideProps 01
        GetServerSideProps: Fetch data on each request.
        Luôn gọi API server side mà không gọi ở phía client
        next/link:
        1. getInitialProps -> trực tiếp gọi sang API của herokuapp

        2. getServerSideProps
            -> Gọi APi vào Server NextJs - Bước trung gian này do NextJs làm tự động cho mình
            -> Server NextJs -> Gọi sang API của HerokuApp
                -> Che giấu được API phía herokuapp
    GetServerSideProps 02
        Khai báo kiểu dữ liệu 
Một số lưu ý về Typescript
    getInitialProps sử dụng NextPage bởi vì trong NextPage đã khai báo sẵn getInitialProps
    getServerSideProps Không dùng NextPage -> có thể dùng React.FC
Static generation và getStaticProps
    3. getStaticProps
        -> Gọi API lên phía Heroku 1 lần duy nhất trong thời điểm build code (yarn build)
        -> Sau khi build đưa lên môi trường production 
            -> Khi truy cập vào nó như là một static page (html tĩnh)
            -> Dữ liệu đã có sẵn rồi. -> Không gọi API lần nữa (Được cached)

        - Ưu điểm: Thời gian load trang rất nhanh
        - Nhược điểm: Nếu dữ liệu của API đó bị thay đổi trên herokuapp 
            -> Ứng dụng của mình sẽ không cập nhật được dữ liệu mới đó
            -> Nếu muốn có dữ liệu mới phải build lại
getStaticPaths
    4. getStaticPaths -> Phai ket hop di chung voi getStaticProps
        Dùng đối với những trang dùng Dynamic Routing
        - List bai viet
            -> Trong lần build code -> Biết được rõ ràng API nào được gọi trước (API get list posts)
        - Có những trang dùng Dynamic Routing
            + Ví dụ như trang bài viết chi tiết
            Ví dụ URL: /post/[id].tsx
                id = 20 -> Goi APi get bai viet co id 20
                id = 30 -> Get API get bai viet co id 30
        Giả sử trên Server HerokuApp có 5 bài viết: id = 20, 30, 40, 50, 60
        Dung thằng getStaticPaths 
            return {
                paths: [
                    { params: { id: 20 } },
                    { params: { id: 30 } }
                ],
                fallback: false (Link du phong = false)
            }
            -> Nếu User truy cập vào URL khác id 20 và 30 -> Không có link dự phòng -> Đẩy ngay qua trang 404
            Nếu khai báo fallback: true
                khi truy cập vào URL khác id 20 và 30 thì getStaticProps được gọi để lấy link còn lại(40, 50, 60)
        When you use getStaticProps on a page with dynamic route parameters, you must use getStaticPaths.
Tổng kết và Ôn tập về Data Fetching
    getInitialProps
        Ưu điểm: Tốt cho SEO, giảm tải phía server
        Nhược điểm: Dễ bị lộ Endpoints về data của API
    getServerSideProps: Fetch data trong mỗi request
        Ưu điểm: Tốt cho SEO, che dấu được Endpoints
        Nhược điểm: Tốc độ ứng dụng sẽ chậm hơn với nhũng lần sau. Tăng tải phía server
    getStaticProps
        Ưu điểm: Tốt cho SEO. Tốc độ tải cực nhanh tại 1 thời điểm nhất định
        Nhược điểm: Không nhận được dữ liệu thay đổi mới nhất trong Database nếu không có Re build

=============================================================================================
                            Project thực tế (NextJs + React + Typescrpit)

Khởi tạo và thiết lập cấu trúc dự án
    # Các bước Setup Project
    ## Cài đặt next app 
    - npx create-next-app meme-project-nextjs
    ## Cài đặt Typescript
    ### Tạo File tsconfig.json và run code
    - tsconfig.json, file này tạo xong và không cần phải làm gì cả mà khi run lại(npm run dev) thì nội 
        dung sẽ tự động được thêm vào
    - yarn add --dev typescript @types/react @types/node    -------> Cài các package liên quan
    - npm run dev
    - Đổi đuôi index.js -> index.tsx
               api/hello.js -> api/hello.ts
    -> File next-env.d.ts sẽ được sinh tự động 
    -> Nội dung trong tsconfig.json sẽ được cấu hình tự động
    ## Tạo thêm config cho images, sass, css
    - Tạo file: next.config.js
    - https://github.com/vercel/next-plugins
        -> next-images(https://github.com/twopluszero/next-images)
        - yarn add next-images
        - next.config.js: Thêm nội dung
            // next.config.js
            const withImages = require('next-images')
            module.exports = withImages()  
        - next-env.d.ts: Thêm nội dung
            /// <reference types="next-images" /> 
    - https://github.com/vercel/next-plugins/tree/master/packages/next-css
        - yarn add @zeit/next-css
        - next.config.js
            - const withCSS = require('@zeit/next-css')
            - withCSS()
    - https://github.com/vercel/next-plugins/tree/master/packages/next-sass
        - yarn add @zeit/next-sass node-sass
        - next.config.js
            - const withSass = require('@zeit/next-sass')
            - withCSS()
    ##Tạo Master Layout cho ứng dụng: Là bố cục xuyên suốt trong project trong tất cả các trang
    - Custom App
        https://nextjs.org/docs/advanced-features/custom-app
        To override the default App, create the file ./pages/_app.js
        _app.js không phải là Page nên không sử dụng được getServerSideProps hay getStaticProps mà chỉ sử dụng được 
            getInitialProps
        - page/app.js -> page/app.tsx
        - Tạo Component Header: Convert html của header sang jsx
            Convert html to jsx
        - Khai báo phần thẻ head của html(có chuyển sang jsx)
            - _app.tsx
                import Head from 'next/head'
                Thêm thẻ <Head>
            - folder css, fonts, images -> public 
            - css/styles.css 
                background-image: url('../images/menu-bg.jpg'); 
                -> background-image: url('/images/menu-bg.jpg');
            - Bootstrap v4.1.3
                Bootstrap npm 
                - yarn add bootstrap@4.1.3
                - _app.tsx
                    import "bootstrap/dist/css/bootstrap.min.css";
            - Nguyên tắc khai báo là thư viện phải được khai báo trước
                bootstrap.min.css -> style.css
                Do đó style.css sẽ không tạo file trong public
                Để thay đổi đúng thứ tự bootstrap.min.css -> style.css
                    -> assets/css/style.css 
                    Rồi sau đó import theo module 
                        import "bootstrap/dist/css/bootstrap.min.css";
                        import "../assets/css/style.css";
Xây dựng trang Home, Login và Register
    Ở trang HomePage thì không muốn show ra phần Footer
        -> useMemo tạo ra 1 biến 
        useMemo được chạy trước khi render
    Trang Login và Register thì không show phần header 
Xây dựng trang Create
    Tạo 1 Snippets: File - References - User Snippets - typescriptreact.json
        "quang_component": {
            "prefix": "quang_component",
            "body": [
                "export default function $1() {",
                "\treturn (",
                "\t\t$2",
                "\t)",
                "}",
            ],
            "description": "export default function ~()"
        },
        "export default const": {
            "prefix": "quang_component_const",
            "body": [
                "const $1 = () => {",
                "\treturn (",
                "\t\t$2",
                "\t)",
                "}",
                "export default $1;"
            ],
            "description": "export default function ~()"
        },
    File - References - User Snippets - typescript.json
        "export ~ from": {
            "prefix": "quang_export_normal",
            "body": [
                "export { default as $1} from \"./$1\"",
            ],
            "description": "export ~ from"
        }
Xây dựng trang Detail
Xây dựng trang liên quan tới User
    Trang user Detail hay trang đổi mật khẩu thì url không cần phải truyền id mà id này sẽ được lưu trong cookie 
    Nếu cookie không tồn tại thì đẩy về trang home 

=============================================================================================
                            Nhóm chức năng Authentication
                    
Thuật ngữ Authentication và Authorization
    Authentication: Là quá trình xác thực người dùng thông qua các đặc điểm nhận dạng của người dùng như username,
        password hay cơ chế token...
    Authorization: Ủy quyền, phân quyền thực hiện sau khi quá trình xác thực người dùng(Authentication) thành công
    Fetch: 
        can i use: https://caniuse.com/
        Là 1 chức năng của ES trở lên nên khi dùng nó thì cần dùng các công cụ để chuyển đổi nó về các dạng phiên 
            bản thấp hơn để hỗ trợ các trình duyệt phiên bản thấp hơn
        Đối với dạng server thì không nên dùng Fetch vì phía server không có trình duyệt
        -> Dùng các thư viện hỗ trợ: isomorphic-fetch
        npm install --save isomorphic-fetch es6-promise
        _app.tsx: MyApp.getInitialProps = async (appContext: AppContext)
        orther:   DemoGetIntialProps.getInitialProps = async (ctx: NextPageContext) 
Thu thập dữ liệu từ Form Login
    javascript:
        debugger;
        -> Closure: 
            key: "email"
Gọi API Login phía Client
Custom API phía Server bằng NextJs
    Giấu đi phần Endpoint(/member/login.php)
    SetCookie phía Server
    Redirect phía Server(Không dùng router.push)
Gọi API Login phía Server
Các kỹ thuật với Cookie phía Client và Server
    Local Storage: Thì chỉ có trình duyệt mới có thể truy xuất vào được
    Cookies: Vừa truy xuất bằng javascript ở trong trình duyệt và vừa gửi nó lên request phía server
    js cookie npm: npm i js-cookie
    Next.js API route support: https://nextjs.org/docs/api-routes/introduction
    Cookie có thể được set phía browser hoặc phía server
Kỹ thuật Redirect phía Client và Server
    res.json(resHeroku); 
        res.json() cũng là câu lệnh để kết thúc request
    http request status 302: Redirect sang trang khác
        res.statusCode = 302;
        res.setHeader('Location', '/');
Xử lí Error cho chức năng Login phía Server
    1. Login -> /api/login -> Thanh cong 
        -> Redirect sang trang home page
        -> Lay duoc token trong _app.tsx
            (Server side render get thong tin user trong app)
    2. Login -> /api/login -> that bai
        -> Redirect quay tro lai /login/error=~
        2.1 Lỗi nhập liệu form(Nên xử lý phía Client)
            Xử lý trước khi Submit
        2.2 Lỗi đăng nhập thất bại(Email sai, hay do password sai)
            Email hoặc mật khẩu không hợp lệ
            Su dung thu vien ho tro notification o ben ngoai để hiển thị thông báo
    Sau khi hiển thị thông báo lỗi xong /login?error=failed -> /login nhưng không reload lại trang 
        how to remove URL params without refresh page 
        window.history.pushState({}, document.title, "/login");
Lấy Token từ Custom App và Master Layout
    Parse cookie từ string sang object
        npm install cookie(yarn add cookie)
        cookie.parse(cookieStr)
    Decode jwt by javascript
        parseJwt() -> Trong trường hợp cố tình thay đổi giá trị token -> không thể parse được(lỗi)
Gọi API Get User Info dựa vào token
    atob is not defined
        yarn add atob
    Could not find a declaration file for module 'cookie'. 
        'c:/xampp/htdocs/nextjs/meme-project-nextjs/node_modules/cookie/index.js' implicitly has an 'any' type.
        Try `npm install @types/cookie` if it exists or add a new declaration (.d.ts) file containing `declare module 'cookie';
    yarn add --dev @types/cookie
    yarn add --dev @types/atob
    yarn add --dev @types/js-cookie
        Giúp cho việc nhắc lệnh tốt hơn 
    Sau khi có id -> gọi api để lấy thông tin của user
        {{base_url}}/member/member.php?userid=7
        Đây là api public nên không cần token 
    TypeError: argument str must be a string
Cách sử dụng React Hooks Global State
    1. getInitialProps: Chạy cả Server và Client
        1.1 Trong lần load đầu tiên -> Chạy ở phía server(typeof window === "undefined")
            Khi truy cập trực tiếp vào đường dẫn /login -> thì đó là Server Side Render
        1.2 Trong lần load tiếp theo(thông qua Link của next/link) -> trở thành client side 
            Không truy xuất vào login 1 cách trực tiếp mà truy xuất vào login bằng thẻ Link(từ trang home)
            -> Đó là Client Side Render
    Quản lý state ở cấp global ở phía Client   
        yarn add react hooks global state 
        useMemo() Chay 1 lan duy nhat khoi tao global state
Ứng dụng Hooks để xây dựng Navigation Guard
    2. Ứng dụng customhook để ngăn chặn user truy cập vào URL nào đó
    Login -> chỉ được phép truy cập nếu chưa đăng nhập
    -> Xây dựng 1 Custom Hooks dùng cho login 
Tối ưu mã nguồn cho chức năng Login
    Thông tin token ko nên lấy ở App  của trình duyệt mà lấy từ global state giống như của thông tin user 
Chức năng Logout và Optional Chaining
    Clear cookie ở phía trình duyệt 
    Reset lại data được lưu ở trong global state 
    cookie: Dùng để parse cookie ra object
    js-cookie: Dùng để get, remove ở phía trình duyệt
    Optional Chaining javascript: userToken?.id && userToken?.email
        -> Không cần kiểm tra userToken có tồn tại hay không
        if(typeof window === "undefined" && userToken?.id && userToken?.email)
        (ctx?: NextPageContext) Có thể truyền hoặc không
Thu thâp dữ liệu từ Form Register
Xử lí Error cho chức năng Register phía Client
    Validate email
        Regular expression for email javascript
Gọi API Register phía Client
    Handle chức năng đăng ký và gọi API 
Cải thiện UI/UX với Loading state
    Khi người dùng đang gửi Request lên server thì thể hiện trang đang loading 
    Loading cục bộ tại Button của trang login và Register
    loading.io 
    State loading trước khi gọi API được set là true 
    Trang login gọi API xử lý ở phía server, sau khi xử lý xong thì thực hiện load lại trang -> loading tự động 
        được set về false
    Trang Register xử lý gọi API ở phía client -> sau khi gọi API xong chủ động set loading về false
        .finally(() => {
            setLoading(false);
        })
    if(loading === true) return;
        Trong trường hợp nhấn Enter nhiều lần, đang loading có nghĩa là đang chờ kết quả nên không làm gì cả
    
=============================================================================================
                            Nhóm chức năng User và Post
                            
Sử dụng Typescript trong Homepage
    post/getListPagination.php?pagesize=3&currPage=1 Lấy danh sách bài viết lớn nhất, không cần gửi theo token
    /post/getListPostUserID.php?userid=2 Cần phải gửi theo token 
Gọi API lấy danh sách bài viết phía Server
    Ép kiểu dữ liệu
        const ctx = context as NextPageContext;
    Promise all: await chung 1 lúc để tiết kiệm được thời gian
        const [listPostsRes, userPostsRes ] = await Promise.all([listPostsPos, userPostsPos]);
Render dữ liệu Homepage và một số lưu ý
    map
        listPosts.map(post => <PostItem key={post.PID} post={post}/>)
    Dynamic routes
        <Link href="/users/[userId]" as={`/users/${post.USERID}`}>
    Xử lý thời gian: moment.js, day.js
        moment.js không dùng hết chức năng nhưng phải import hết 
        day.js dùng gì thì import cái đó 
        -> yarn add dayjs
Chức năng Pagination (Load More Posts)
    Khi nhấn vào nút Load More thì thực hiện gọi đến API để lấy ra dữ liệu của trang tiếp theo 
    Sau đó thực hiện join dữ liệu lấy được khi gọi API với listPosts hiện tại 
    Khởi tạo 1 state cho PostListItem
        const [currPage, setCurrPage] = useState(1);
        const [listPosts, setListPosts] = useState(props.listPosts);
    Tăng giá trị state của currPage sau mỗi lần nhấn nút Load More
        setCurrPage(prev => prev + 1);
    Join
        setListPosts([
            ...listPosts,
            ...newPosts
        ])
Xử lí Form cho chức năng Search Post
    Nhập từ khóa tìm kiếm rồi nhấn Enter -> Redirect sang trang Search /search/q=~ 
Gọi API Search Post và Masonry Layout
    react masonry npm
    yarn add react-responsive-masonry
Highlight keywords cho chức năng tìm kiếm
    encodeURI()
    decodeURI()
    <p 
        dangerouslySetInnerHTML={{
            __html: renderContent()
        }}
    />
Filter bài viết theo danh mục (Category)
    Category nằm ở trong Header là phần dùng chung mà không thuộc 1 page cụ thể nào cả
    -> gọi api ở _app
Gọi API cho chức năng User Detail
    Trang userDetail thì bắt buộc đăng nhập thì mới vào được 
    /post/getListPostUserID.php?userid=2 phải có token thì mới gọi được 
    Vào trang user Detail của 1 user không tồn tại -> Redirect về trang home
Render dữ liệu User Detail
Chức năng thay đổi mật khẩu
    /member/password.php
    Dựa vào giá trị của tooken giải mã ra thì sẽ biết được ai đang gọi api để thay đổi mật khẩu 
        của người đó
    Không cần giải quyết đến SEO vì trang này chỉ có 1 mình user vào thôi -> không cần gọi api
        liên quan đến server mà chỉ cần sử lý phía client 
    Sau khi thay đổi mật khẩu thành công thì Clear hết dữ liệu ở trong Form
Chức năng User Profile và kĩ thuật upload avatar
    01
        Xử lý phần hình ảnh để người dùng khi upload có thể review trước
        Khi upload hình thì chưa submit lên server ngay mà cho người dùng xem ở chế độ review nghĩa là 
            URL sẽ mã hóa tấm hình(dạng object file) thành dạng base64 rồi render ra thẻ div cho người dùng xem trước
        Xây dựng hàm xử lý trung gian người dùng không click trực tiếp vào ô input file mà click vào thẻ div(phần
            hiển thị tấm hình)
            -> Dùng useRef để trỏ cấu trúc DOM tới ô input chọn tệp file, khi click vào hình avatar thì gọi hàm
            click trong javascript
        Sau khi nhấn Submit và thay đổi thành công thì thực hiện thay đổi phần data mà mình lưu trong currentUser
        /member/update.php api này không truyền được theo dạng json(raw->json)
            api có sử dụng đến object file, đây là object ko thể mo tả trong json được
                form-data 
                Content-Type:  multipart/form-data
        handleOnChange() hand cho dạng input text hay select box 
        handleChangeFile() Handle cho dạng input file 
    02
        FileReader.readAsDataURL() javascript
            Mã hóa object file sang dạng URL đọc được ở dạng client, dạng này ko cần phải gửi lên server mà có thể cho người 
                dùng có thể xem trước hình ảnh avatar đã chọn
            https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
        formdata api by javascript
            Giả lập lại form để có lời gọi api mà ko cần truyền Content-Type là json
            https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData
            Giả lập lại form bằng mã nguồn của javascript chứ không submit bằng Form 
        Sau khi cập nhật thông tin của user xong thì cập nhật thông tin user vào state của currentUser
Loading và Route events trong NextJs
    Loading chờ data đã được chuẩn bị giữa các trang
        -> Cần tạo loading toàn cục cho cả trang
        -> đặt thêm loading trong _app vì tỏng _app là phầuseEffectn dùng chung cho tất cả các trang
    router.events: You can listen to different events happening inside the Next.js Router. Here's a list of supported events
        routeChangeStart(url) - Fires when a route starts to change
        routeChangeComplete(url) - Fires when a route changed completely
        routeChangeError(err, url) - Fires when there's an error when changing routes,
    https://loading.io/
    Dùng thư viện hỗ trợ nprogress
        bootstrap@4.1.3 requires a peer of jquery@1.9.1 - 3 but none is installed
            yarn add jquery@1.9.1
        npprogress npm 
            npm install --save nprogress
Phân tích chức năng Create Post
    Phải đăng nhập rồi thì mới cho phép vào 
    Giao diện gồm 2 column đó là: PostDetailForm và PostDetailSidebar nhưng đều thuộc 1 form 
    Một bài viết có thể thuộc nhiều danh mục khác nhau
    Có 2 button để chọn ảnh đó là: Chế ảnh từ mêm và đăng ảnh từ máy tính -> có 2 options cho người dùng
        - Lấy ảnh từ nơi khác về và lấy đường link của ảnh đó
        - Đăng ảnh từ máy tính -> giống như xử lý files trong trang profile, gửi lên server object file
    Dữ liệu gửi đến api là ở dạng form-data chứ ko phải dạng json(/post/addNew.php)
    Nếu người dùng vừa lấy ảnh từ nơi khác vừa đăng ảnh từ máy tính thì ưu tiên ảnh là ảnh được đăng từ bên ngoài vào 
    Category là 1 danh sách, người dùng có thể chọn nên phía react có thể lưu ở dạng array khi gửi đến api theo dạn form-data thì 
        catagory được chuyển dạng string mỗi phần tử là id của catagory được cách nhau bởi dấu phẩy 
    Checkbox không đơn thuần chỉ là value như ô input bình thường mà nó còn có 2 trạng thái liên quan đến việc người dùng có check 
        vào hay không đó là checked(true/false)
Xử lí CheckBox trong React
    